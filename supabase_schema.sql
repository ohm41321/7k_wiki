-- 1. Create users table
-- This table will store your user data. It links with Supabase Auth by using the same UUID.
CREATE TABLE public.users (
    id uuid NOT NULL,
    username text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_username_key UNIQUE (username),
    CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- 2. Create posts table
-- This table stores the main content of your posts.
CREATE TABLE public.posts (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    slug text NOT NULL,
    title text NOT NULL,
    content text NULL,
    author_id uuid NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT posts_slug_key UNIQUE (slug),
    CONSTRAINT posts_author_id_fkey FOREIGN KEY (author_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- 3. Create comments table
-- This table stores comments related to posts.
CREATE TABLE public.comments (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    content text NOT NULL,
    post_id bigint NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT comments_pkey PRIMARY KEY (id),
    CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE,
    CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- 4. Function to update 'updated_at' timestamp
-- This function will be triggered whenever a post is updated.
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 5. Trigger to automatically update 'updated_at' on posts table
CREATE TRIGGER on_posts_updated
BEFORE UPDATE ON public.posts
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- 6. Enable Row Level Security (RLS) for all tables
-- This is a crucial security step in Supabase.
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- 7. Create RLS policies
-- These policies define who can access or modify the data.

-- Policies for 'users' table
CREATE POLICY "Public users are viewable by everyone." ON public.users
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own user." ON public.users
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own user." ON public.users
  FOR UPDATE USING (auth.uid() = id);

-- Policies for 'posts' table
CREATE POLICY "Public posts are viewable by everyone." ON public.posts
  FOR SELECT USING (true);

CREATE POLICY "Authenticated users can create posts." ON public.posts
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update their own posts." ON public.posts
  FOR UPDATE USING (auth.uid() = author_id);

CREATE POLICY "Users can delete their own posts." ON public.posts
  FOR DELETE USING (auth.uid() = author_id);

-- Policies for 'comments' table
CREATE POLICY "Public comments are viewable by everyone." ON public.comments
  FOR SELECT USING (true);

CREATE POLICY "Authenticated users can create comments." ON public.comments
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Users can update their own comments." ON public.comments
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own comments." ON public.comments
  FOR DELETE USING (auth.uid() = user_id);
